/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package librarysystem.librarian.boundary;

import librarysystem.entity.Book;
import librarysystem.entity.BorrowEntry;
import librarysystem.entity.BorrowerCard;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import librarysystem.librarian.controller.CRUDBookController;
import librarysystem.librarian.controller.CRUDBorrowInfoController;
import librarysystem.librarian.controller.CRUDCardController;
//import librarian.boundary.UpdateBookInfo;

/**
 * Main Librarian Interface screen Shown default
 *
 * @author pdc
 */
public class LibrarianHomeScreen extends javax.swing.JFrame {

    private static LibrarianHomeScreen instance = null;

    /**
     * Creates new form LibarianHomeScreen
     *
     * @throws java.sql.SQLException
     */
    public LibrarianHomeScreen() throws SQLException {

        initComponents();
        this.setLocationRelativeTo(null);
        //this.setUndecorated(true);
        initComponentsDetails();

        setInitbookTableModel();
        setValueToBookTableModel();

        setInitcardTableModel();
        setValueToCardTableModel();

        setInitborrowingTableModel();
        setValueToBorrowingTableModel();

        jButtonViewBookCopy.setEnabled(false);
        jButtonUpdateBookInfo.setEnabled(false);
        jButtonDeleteBook.setEnabled(false);
        jButtonAddNewCopy.setEnabled(false);
        jButtonSearchbyTitle.setEnabled(false);

        jButtonUpdateCardInfo.setEnabled(false);
        jButtonIssueCard.setEnabled(false);
        jButtonDeactiveCard.setEnabled(false);
        jButtonSearchCardbyUsername.setEnabled(false);

        jButtonDeleteBorrowInfo.setEnabled(false);
        jButtonChangeStatusToReturned.setEnabled(false);
        jButtonChangeStatustoBorrowed.setEnabled(false);
        jButtonUpdateBorrowInfo.setEnabled(false);
        jButtonSearchUsername.setEnabled(false);
    }

    private void initComponentsDetails() {
        jTableBookList.setDefaultEditor(Object.class, null);
        jTableCardList.setDefaultEditor(Object.class, null);
        jTableBorrowingList.setDefaultEditor(Object.class, null);
    }

    /**
     *
     * @return @throws SQLException
     */
    public static synchronized LibrarianHomeScreen getInstance() throws SQLException {
        if (instance == null) {
            instance = new LibrarianHomeScreen();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneLibrarianUI = new javax.swing.JTabbedPane();
        jPanelBook = new javax.swing.JPanel();
        jButtonUpdateBookInfo = new javax.swing.JButton();
        jButtonAddNewCopy = new javax.swing.JButton();
        jButtonAddNewBook = new javax.swing.JButton();
        jTextFieldTitle = new javax.swing.JTextField();
        jButtonSearchbyTitle = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jScrollPaneBookList = new javax.swing.JScrollPane();
        jTableBookList = new javax.swing.JTable(bookTableModel);
        jButtonViewBookCopy = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonDeleteBook = new javax.swing.JButton();
        jPanelCard = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldCard = new javax.swing.JTextField();
        jButtonSearchCardbyUsername = new javax.swing.JButton();
        jScrollPaneCardList = new javax.swing.JScrollPane();
        jTableCardList = new javax.swing.JTable(cardTableModel);
        jButtonUpdateCardInfo = new javax.swing.JButton();
        jButtonIssueCard = new javax.swing.JButton();
        jButtonDeactiveCard = new javax.swing.JButton();
        jPanelBorrowing = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldBorrowingUserName = new javax.swing.JTextField();
        jButtonSearchUsername = new javax.swing.JButton();
        jScrollPaneBorrowingInfo = new javax.swing.JScrollPane();
        jTableBorrowingList = new javax.swing.JTable(borrowingTableModel);
        jButtonChangeStatustoBorrowed = new javax.swing.JButton();
        jButtonChangeStatusToReturned = new javax.swing.JButton();
        jButtonDeleteBorrowInfo = new javax.swing.JButton();
        jButtonUpdateBorrowInfo = new javax.swing.JButton();
        jButtonLogout = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library System");
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        jButtonUpdateBookInfo.setText("Update Book Info");
        jButtonUpdateBookInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateBookInfoActionPerformed(evt);
            }
        });

        jButtonAddNewCopy.setText("Add New Copy");
        jButtonAddNewCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddNewCopyActionPerformed(evt);
            }
        });

        jButtonAddNewBook.setText("Add New Book");
        jButtonAddNewBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddNewBookActionPerformed(evt);
            }
        });

        jTextFieldTitle.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextFieldTitleInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextFieldTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTitleActionPerformed(evt);
            }
        });
        jTextFieldTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldTitleKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldTitleKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldTitleKeyReleased(evt);
            }
        });

        jButtonSearchbyTitle.setText("Search");
        jButtonSearchbyTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchbyTitleActionPerformed(evt);
            }
        });

        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        jScrollPaneBookList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPaneBookList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPaneBookListMouseClicked(evt);
            }
        });

        jTableBookList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBookListMouseClicked(evt);
            }
        });
        jScrollPaneBookList.setViewportView(jTableBookList);

        jButtonViewBookCopy.setText("View Book Copy List");
        jButtonViewBookCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewBookCopyActionPerformed(evt);
            }
        });

        jLabel1.setText("Search by Title");

        jButtonDeleteBook.setText("Delete Book");
        jButtonDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBookLayout = new javax.swing.GroupLayout(jPanelBook);
        jPanelBook.setLayout(jPanelBookLayout);
        jPanelBookLayout.setHorizontalGroup(
            jPanelBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneBookList)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBookLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelBookLayout.createSequentialGroup()
                        .addComponent(jButtonAddNewBook)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonUpdateBookInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDeleteBook))
                    .addGroup(jPanelBookLayout.createSequentialGroup()
                        .addComponent(jButtonViewBookCopy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAddNewCopy))
                    .addGroup(jPanelBookLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSearchbyTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanelBookLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAddNewBook, jButtonReset});

        jPanelBookLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAddNewCopy, jButtonDeleteBook, jButtonUpdateBookInfo, jButtonViewBookCopy});

        jPanelBookLayout.setVerticalGroup(
            jPanelBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonSearchbyTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPaneBookList, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonViewBookCopy)
                    .addComponent(jButtonAddNewCopy))
                .addGap(8, 8, 8)
                .addGroup(jPanelBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUpdateBookInfo)
                    .addComponent(jButtonDeleteBook)
                    .addComponent(jButtonAddNewBook))
                .addContainerGap())
        );

        jTabbedPaneLibrarianUI.addTab("Book", jPanelBook);

        jLabel3.setText("Search by Username");

        jTextFieldCard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldCardKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCardKeyReleased(evt);
            }
        });

        jButtonSearchCardbyUsername.setText("Search");
        jButtonSearchCardbyUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchCardbyUsernameActionPerformed(evt);
            }
        });

        jTableCardList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCardListMouseClicked(evt);
            }
        });
        jScrollPaneCardList.setViewportView(jTableCardList);

        jButtonUpdateCardInfo.setText("Update Card Info");
        jButtonUpdateCardInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateCardInfoActionPerformed(evt);
            }
        });

        jButtonIssueCard.setText("Issue Card");
        jButtonIssueCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIssueCardActionPerformed(evt);
            }
        });

        jButtonDeactiveCard.setText("Deactivate Card");
        jButtonDeactiveCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeactiveCardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCardLayout = new javax.swing.GroupLayout(jPanelCard);
        jPanelCard.setLayout(jPanelCardLayout);
        jPanelCardLayout.setHorizontalGroup(
            jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCardLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneCardList)
                    .addGroup(jPanelCardLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldCard, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSearchCardbyUsername))
                    .addGroup(jPanelCardLayout.createSequentialGroup()
                        .addComponent(jButtonIssueCard)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonUpdateCardInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDeactiveCard)))
                .addContainerGap())
        );

        jPanelCardLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonDeactiveCard, jButtonIssueCard, jButtonUpdateCardInfo});

        jPanelCardLayout.setVerticalGroup(
            jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCardLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearchCardbyUsername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPaneCardList, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUpdateCardInfo)
                    .addComponent(jButtonIssueCard)
                    .addComponent(jButtonDeactiveCard))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneLibrarianUI.addTab("Card", jPanelCard);

        jLabel4.setText("Search by Username");

        jTextFieldBorrowingUserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldBorrowingUserNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldBorrowingUserNameKeyReleased(evt);
            }
        });

        jButtonSearchUsername.setText("Search");
        jButtonSearchUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchUsernameActionPerformed(evt);
            }
        });

        jTableBorrowingList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBorrowingListMouseClicked(evt);
            }
        });
        jScrollPaneBorrowingInfo.setViewportView(jTableBorrowingList);

        jButtonChangeStatustoBorrowed.setText("Change Status to Borrowed");
        jButtonChangeStatustoBorrowed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeStatustoBorrowedActionPerformed(evt);
            }
        });

        jButtonChangeStatusToReturned.setText("Change Status to Returned");
        jButtonChangeStatusToReturned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeStatusToReturnedActionPerformed(evt);
            }
        });

        jButtonDeleteBorrowInfo.setText("Delete Borrow Info");
        jButtonDeleteBorrowInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteBorrowInfoActionPerformed(evt);
            }
        });

        jButtonUpdateBorrowInfo.setText("Update Borrow Info");
        jButtonUpdateBorrowInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateBorrowInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBorrowingLayout = new javax.swing.GroupLayout(jPanelBorrowing);
        jPanelBorrowing.setLayout(jPanelBorrowingLayout);
        jPanelBorrowingLayout.setHorizontalGroup(
            jPanelBorrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBorrowingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBorrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelBorrowingLayout.createSequentialGroup()
                        .addComponent(jButtonUpdateBorrowInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonChangeStatustoBorrowed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonChangeStatusToReturned)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                        .addComponent(jButtonDeleteBorrowInfo))
                    .addComponent(jScrollPaneBorrowingInfo, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelBorrowingLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldBorrowingUserName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSearchUsername)))
                .addContainerGap())
        );

        jPanelBorrowingLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonChangeStatusToReturned, jButtonChangeStatustoBorrowed, jButtonDeleteBorrowInfo, jButtonUpdateBorrowInfo});

        jPanelBorrowingLayout.setVerticalGroup(
            jPanelBorrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBorrowingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBorrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldBorrowingUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearchUsername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPaneBorrowingInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelBorrowingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonChangeStatustoBorrowed)
                    .addComponent(jButtonChangeStatusToReturned)
                    .addComponent(jButtonDeleteBorrowInfo)
                    .addComponent(jButtonUpdateBorrowInfo))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPaneLibrarianUI.addTab("Borrow Info", jPanelBorrowing);

        jButtonLogout.setText("Logout");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        jLabel2.setText("Library System - Librarian");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPaneLibrarianUI))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLogout)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneLibrarianUI)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUpdateBookInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateBookInfoActionPerformed
        // TODO add your handling code here:
        int row = jTableBookList.getSelectedRow();
        int booknumber = (int) jTableBookList.getValueAt(row, 0);
        String title = (String) jTableBookList.getValueAt(row, 1);
        String category = (String) jTableBookList.getValueAt(row, 3);
        String author = (String) jTableBookList.getValueAt(row, 2);
        String publisher = (String) jTableBookList.getValueAt(row, 4);
        String isbn = (String) jTableBookList.getValueAt(row, 5);
        UpdateBookInfo frame = new UpdateBookInfo(booknumber, title, category, author, publisher, isbn, this);
        frame.setVisible(true);
        this.setEnabled(false);
        this.setAlwaysOnTop(false);
    }//GEN-LAST:event_jButtonUpdateBookInfoActionPerformed

    private void jButtonAddNewCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddNewCopyActionPerformed
        // TODO add your handling code here:

        int row = jTableBookList.getSelectedRow();
        int booknumber = (int) jTableBookList.getValueAt(row, 0);
        String title = (String) jTableBookList.getValueAt(row, 1);
        AddNewCopy frame = new AddNewCopy(booknumber, title, this);
        frame.setVisible(true);
        this.setEnabled(false);
        this.setAlwaysOnTop(false);
    }//GEN-LAST:event_jButtonAddNewCopyActionPerformed

    private void jButtonAddNewBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddNewBookActionPerformed
        // TODO add your handling code here:
        this.setAlwaysOnTop(false);
        AddNewBook frame = new AddNewBook(jTextFieldTitle.getText(), this);
        frame.setVisible(true);
        this.setAlwaysOnTop(false);
        this.setEnabled(false);
    }//GEN-LAST:event_jButtonAddNewBookActionPerformed

    private void jButtonSearchbyTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchbyTitleActionPerformed
        // TODO add your handling code here:
        String title = jTextFieldTitle.getText();
        try {
            setValueToBookTableModelbyTitle(title);
        } catch (SQLException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSearchbyTitleActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        // TODO add your handling code here:
        jTextFieldTitle.setText("");
        while (bookTableModel.getRowCount() > 0) {
            bookTableModel.removeRow(0);
        }
        try {
            setValueToBookTableModel();
        } catch (SQLException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jTableBookListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBookListMouseClicked
        // TODO add your handling code here:
        jButtonViewBookCopy.setEnabled(true);
        jButtonUpdateBookInfo.setEnabled(true);
        jButtonDeleteBook.setEnabled(true);
        jButtonAddNewCopy.setEnabled(true);
        if (evt.getClickCount() == 2) {
            Point pnt = evt.getPoint();
            int row = jTableBookList.rowAtPoint(pnt);
            //System.out.println(row);
            ViewBookCopyList frame = null;
            try {
                frame = new ViewBookCopyList((int) jTableBookList.getValueAt(row, 0), (String) jTableBookList.getValueAt(row, 1), this);
            } catch (SQLException ex) {
                Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
            }
            frame.setVisible(true);
            this.setEnabled(false);
            this.setAlwaysOnTop(false);
        }
    }//GEN-LAST:event_jTableBookListMouseClicked

    private void jScrollPaneBookListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPaneBookListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPaneBookListMouseClicked

    private void jButtonViewBookCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewBookCopyActionPerformed
        // TODO add your handling code here:
        int row = jTableBookList.getSelectedRow();
        int booknumber = (int) jTableBookList.getValueAt(row, 0);
        String booktitle = (String) jTableBookList.getValueAt(row, 1);
        ViewBookCopyList frame = null;
        try {
            frame = new ViewBookCopyList(booknumber, booktitle, this);
        } catch (SQLException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
        frame.setVisible(true);
        this.setEnabled(false);
        this.setAlwaysOnTop(false);
    }//GEN-LAST:event_jButtonViewBookCopyActionPerformed

    private void jButtonDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteBookActionPerformed
        // TODO add your handling code here:
        int row = jTableBookList.getSelectedRow();
        int booknumber = (int) jTableBookList.getValueAt(row, 0);
        try {
            new CRUDBookController().deleteBookbyBookNumber(booknumber);
        } catch (SQLException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            setValueToBookTableModel();
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonDeleteBookActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        // TODO add your handling code here:
        super.dispose();
        LoginForm loginForm = new LoginForm();
        loginForm.setVisible(true);
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jTextFieldTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTitleActionPerformed

    private void jTableCardListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCardListMouseClicked
        // TODO add your handling code here:
        jButtonUpdateCardInfo.setEnabled(true);
        int row = jTableCardList.getSelectedRow();
        String status = (String) jTableCardList.getValueAt(row, 3);
        if (status.equals("Activated")) {
            jButtonIssueCard.setEnabled(false);
            jButtonDeactiveCard.setEnabled(true);
        } else if (status.equals("Unactivated")) {
            jButtonIssueCard.setEnabled(true);
            jButtonDeactiveCard.setEnabled(false);
        }


    }//GEN-LAST:event_jTableCardListMouseClicked

    private void jButtonSearchCardbyUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchCardbyUsernameActionPerformed
        // TODO add your handling code here:
        jButtonIssueCard.setEnabled(false);
        jButtonDeactiveCard.setEnabled(false);
        jButtonUpdateCardInfo.setEnabled(false);
        String uname = jTextFieldCard.getText();
        try {
            setValueToCardTableModelbyUsername(uname);
        } catch (SQLException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSearchCardbyUsernameActionPerformed

    private void jButtonUpdateCardInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateCardInfoActionPerformed
        // TODO add your handling code here:
        int row = jTableCardList.getSelectedRow();
        int borrowercardnumber = (int) jTableCardList.getValueAt(row, 0);
        String username = (String) jTableCardList.getValueAt(row, 1);
        Integer activedcode = (Integer) jTableCardList.getValueAt(row, 2);
        String status = (String) jTableCardList.getValueAt(row, 3);
        String expireddate = (String) jTableCardList.getValueAt(row, 4);
        UpdateCardInfo frame = new UpdateCardInfo(borrowercardnumber, username, activedcode, status, expireddate, this);
        frame.setVisible(true);
        this.setAlwaysOnTop(false);
        this.setEnabled(false);
    }//GEN-LAST:event_jButtonUpdateCardInfoActionPerformed

    private void jButtonIssueCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIssueCardActionPerformed
        // TODO add your handling code here:
        int row = jTableCardList.getSelectedRow();
        int borrowercardnumber = (int) jTableCardList.getValueAt(row, 0);
        try {
            new CRUDCardController().updateStatus(borrowercardnumber, 1);
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            setValueToCardTableModel();
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonIssueCardActionPerformed

    private void jButtonDeactiveCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeactiveCardActionPerformed
        // TODO add your handling code here:
        int row = jTableCardList.getSelectedRow();
        int borrowercardnumber = (int) jTableCardList.getValueAt(row, 0);
        try {
            new CRUDCardController().updateStatus(borrowercardnumber, -1);
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            setValueToCardTableModel();
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonDeactiveCardActionPerformed

    private void jButtonSearchUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchUsernameActionPerformed
        // TODO add your handling code here:
        String username = jTextFieldBorrowingUserName.getText();
        try {
            setValueToBorrowTableModelbyUsername(username);
        } catch (SQLException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSearchUsernameActionPerformed

    private void jButtonChangeStatustoBorrowedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeStatustoBorrowedActionPerformed
        // TODO add your handling code here:
        int row = jTableBorrowingList.getSelectedRow();
        int bookcopynumber = (int) jTableBorrowingList.getValueAt(row, 2);
        int oldstatus = deconvertBorrowStatus((String) jTableBorrowingList.getValueAt(row, 5));
        try {
            new CRUDBorrowInfoController().updateStatus(bookcopynumber, 1, oldstatus);
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            setValueToBorrowingTableModel();
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonChangeStatustoBorrowedActionPerformed

    private void jTableBorrowingListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBorrowingListMouseClicked
        // TODO add your handling code here:
        jButtonUpdateBorrowInfo.setEnabled(true);
        jButtonDeleteBorrowInfo.setEnabled(true);
        int row = jTableBorrowingList.getSelectedRow();
        String status = (String) jTableBorrowingList.getValueAt(row, 5);
        if (status.equals("To Be Borrowed")) {
            jButtonChangeStatustoBorrowed.setEnabled(true);
            jButtonChangeStatusToReturned.setEnabled(false);
        } else if (status.equals("Borrowed")) {
            jButtonChangeStatustoBorrowed.setEnabled(false);
            jButtonChangeStatusToReturned.setEnabled(true);
        } else if (status.equals("Overdued")) {
            jButtonChangeStatustoBorrowed.setEnabled(false);
            jButtonChangeStatusToReturned.setEnabled(false);
        } else {
            jButtonChangeStatustoBorrowed.setEnabled(false);
            jButtonChangeStatusToReturned.setEnabled(false);
        }

    }//GEN-LAST:event_jTableBorrowingListMouseClicked

    private void jTextFieldTitleInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextFieldTitleInputMethodTextChanged
        // TODO add your handling code here:
        //jButtonSearchbyTitle.setEnabled(true);
    }//GEN-LAST:event_jTextFieldTitleInputMethodTextChanged

    private void jTextFieldTitleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTitleKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextFieldTitleKeyTyped

    private void jTextFieldTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTitleKeyReleased
        // TODO add your handling code here:
        if (!jTextFieldTitle.getText().isEmpty()) {
            jButtonSearchbyTitle.setEnabled(true);
        } else {
            jButtonSearchbyTitle.setEnabled(false);
        }
    }//GEN-LAST:event_jTextFieldTitleKeyReleased

    private void jTextFieldCardKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCardKeyReleased
        // TODO add your handling code here:
        if (!jTextFieldCard.getText().isEmpty()) {
            jButtonSearchCardbyUsername.setEnabled(true);
        } else {
            jButtonSearchCardbyUsername.setEnabled(false);
            try {
                setValueToCardTableModel();
            } catch (SQLException ex) {
                Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTextFieldCardKeyReleased

    private void jTextFieldBorrowingUserNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBorrowingUserNameKeyReleased
        // TODO add your handling code here:
        if (!jTextFieldBorrowingUserName.getText().isEmpty()) {
            jButtonSearchUsername.setEnabled(true);
        } else {
            jButtonSearchUsername.setEnabled(false);
            try {
                setValueToBorrowingTableModel();
            } catch (SQLException ex) {
                Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTextFieldBorrowingUserNameKeyReleased

    private void jTextFieldTitleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTitleKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!jTextFieldTitle.getText().isEmpty()) {
                String title = jTextFieldTitle.getText();
                try {
                    setValueToBookTableModelbyTitle(title);
                } catch (SQLException ex) {
                    Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jTextFieldTitleKeyPressed

    private void jTextFieldCardKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCardKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!jTextFieldCard.getText().isEmpty()) {
                jButtonIssueCard.setEnabled(false);
                jButtonDeactiveCard.setEnabled(false);
                jButtonUpdateCardInfo.setEnabled(false);
                String uname = jTextFieldCard.getText();
                try {
                    setValueToCardTableModelbyUsername(uname);
                } catch (SQLException ex) {
                    Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jTextFieldCardKeyPressed

    private void jTextFieldBorrowingUserNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBorrowingUserNameKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!jTextFieldBorrowingUserName.getText().isEmpty()) {
                String username = jTextFieldBorrowingUserName.getText();
                try {
                    setValueToBorrowTableModelbyUsername(username);
                } catch (SQLException ex) {
                    Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jTextFieldBorrowingUserNameKeyPressed

    private void jButtonChangeStatusToReturnedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeStatusToReturnedActionPerformed
        // TODO add your handling code here:
        int row = jTableBorrowingList.getSelectedRow();
        int bookcopynumber = (int) jTableBorrowingList.getValueAt(row, 2);
        int oldstatus = deconvertBorrowStatus((String) jTableBorrowingList.getValueAt(row, 5));
        try {
            new CRUDBorrowInfoController().updateStatus(bookcopynumber, -1, oldstatus);
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            setValueToBorrowingTableModel();
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonChangeStatusToReturnedActionPerformed

    private void jButtonUpdateBorrowInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateBorrowInfoActionPerformed
        // TODO add your handling code here:
        int row = jTableBorrowingList.getSelectedRow();
        int bookcopynumber = (int) jTableBorrowingList.getValueAt(row, 2);
        String expectedreturndate = (String) jTableBorrowingList.getValueAt(row, 4);
        int status = deconvertBorrowStatus((String) jTableBorrowingList.getValueAt(row, 5));
        UpdateBorrowInfo frame = new UpdateBorrowInfo(bookcopynumber, expectedreturndate, this, status);
        frame.setVisible(true);
        this.setAlwaysOnTop(false);
        this.setEnabled(false);
    }//GEN-LAST:event_jButtonUpdateBorrowInfoActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try {
            // TODO add your handling code here:
            if (jButtonSearchbyTitle.isEnabled()) {
                setValueToBookTableModelbyTitle(jTextFieldTitle.getText());
            } else {
                setValueToBookTableModel();
            }

            if (jButtonSearchCardbyUsername.isEnabled()) {
                setValueToCardTableModelbyUsername(jTextFieldCard.getText());
            } else {
                setValueToCardTableModel();
            }

            if (jButtonSearchUsername.isEnabled()) {
                setValueToBorrowTableModelbyUsername(jTextFieldBorrowingUserName.getText());
            } else {
                setValueToBorrowingTableModel();
            }

        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
//        try {
//            // TODO add your handling code here:
//            setValueToBookTableModel();
//        } catch (SQLException ex) {
//            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_formWindowDeactivated

    private void jButtonDeleteBorrowInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteBorrowInfoActionPerformed
        // TODO add your handling code here:
        int row = jTableBorrowingList.getSelectedRow();
        int bookcopynumber = (int) jTableBorrowingList.getValueAt(row, 2);
        int status = deconvertBorrowStatus((String) jTableBorrowingList.getValueAt(row, 5));
        try {
            new CRUDBorrowInfoController().deleteBorrowInfobyBookcopyBumber(bookcopynumber, status);
        } catch (SQLException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            setValueToBorrowingTableModel();
        } catch (SQLException ex) {
            Logger.getLogger(LibrarianHomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonDeleteBorrowInfoActionPerformed

    private final DefaultTableModel bookTableModel = new DefaultTableModel();
    private final DefaultTableModel cardTableModel = new DefaultTableModel();
    private final DefaultTableModel borrowingTableModel = new DefaultTableModel();

    private void setInitbookTableModel() {
        bookTableModel.addColumn("Book Number");
        bookTableModel.addColumn("Title");
        bookTableModel.addColumn("Author");
        bookTableModel.addColumn("Category");
        bookTableModel.addColumn("Pubnisher");
        bookTableModel.addColumn("ISBN");
    }

    private void setInitcardTableModel() {
        cardTableModel.addColumn("Borrower Card Number");
        cardTableModel.addColumn("Username");
        cardTableModel.addColumn("Activated Code");
        cardTableModel.addColumn("Status");
        cardTableModel.addColumn("Expired Date");
    }

    private void setInitborrowingTableModel() {
        //borrowingTableModel.addColumn("Borrower Card Number");
        borrowingTableModel.addColumn("Username");
        //borrowingTableModel.addColumn("Book Copy Number");
        borrowingTableModel.addColumn("Book Name");
        borrowingTableModel.addColumn("Book Copy Number");
        borrowingTableModel.addColumn("Borrow Date");
        borrowingTableModel.addColumn("Expected Return Date");
        borrowingTableModel.addColumn("Status");
    }

    private String convertStatus(Integer status) {
        if (status == 0) {
            return "Unactivated";
        } else if (status == 1) {
            return "Activated";
        }
        return "Deactivated";
    }

//    private Integer deconvertStatus(String status) {
//        if (status.equals("Unactivated")) {
//            return 0;
//        } else if (status.equals("Activated")) {
//            return 1;
//        }
//        return -1;
//    }
    /**
     *
     * @param status
     * @return
     */
    public String convertBorrowStatus(Integer status) {
        if (null != status) {
            switch (status) {
                case 0:
                    return "To Be Borrowed";
                case 1:
                    return "Borrowed";
                case 2:
                    return "Overdued";
                default:
                    break;
            }
        }
        return "Returned";
    }

    /**
     *
     * @param status
     * @return
     */
    public Integer deconvertBorrowStatus(String status) {
        switch (status) {
            case "To Be Borrowed":
                return 0;
            case "Borrowed":
                return 1;
            case "Overdued":
                return 2;
            default:
                break;
        }
        return 3;
    }

    /**
     *
     * @throws SQLException
     */
    public void setValueToBookTableModel() throws SQLException {
        jButtonViewBookCopy.setEnabled(false);
        jButtonUpdateBookInfo.setEnabled(false);
        jButtonDeleteBook.setEnabled(false);
        jButtonAddNewCopy.setEnabled(false);
        jButtonSearchbyTitle.setEnabled(false);
        while (bookTableModel.getRowCount() > 0) {
            bookTableModel.removeRow(0);
        }
        ArrayList allBooks = new CRUDBookController().getAllBook();
        for (int i = 0; i < allBooks.size(); i++) {
            Book book = (Book) allBooks.get(i);
            bookTableModel.addRow(new Object[]{book.getBookNumber(), book.getTitle(), book.getAuthor(), book.getClassification(), book.getPublisher(), book.getiSBN()});
        }
    }

    /**
     *
     * @throws SQLException
     */
    public void setValueToCardTableModel() throws SQLException {
        jButtonUpdateCardInfo.setEnabled(false);
        jButtonIssueCard.setEnabled(false);
        jButtonDeactiveCard.setEnabled(false);
        while (cardTableModel.getRowCount() > 0) {
            cardTableModel.removeRow(0);
        }
        ArrayList allCards = new CRUDCardController().getAllCard();
        for (int i = 0; i < allCards.size(); i++) {
            BorrowerCard borrowerCard = (BorrowerCard) allCards.get(i);
            cardTableModel.addRow(new Object[]{borrowerCard.getBorrowerCardNumber(), borrowerCard.getUsername(), borrowerCard.getActivatedCode(), convertStatus(borrowerCard.getStatus()), borrowerCard.getExpiredDate()});
        }
    }

    /**
     *
     * @throws SQLException
     */
    public void setValueToBorrowingTableModel() throws SQLException {
        jButtonUpdateBorrowInfo.setEnabled(false);
        jButtonDeleteBorrowInfo.setEnabled(false);
        jButtonChangeStatusToReturned.setEnabled(false);
        jButtonChangeStatustoBorrowed.setEnabled(false);
        while (borrowingTableModel.getRowCount() > 0) {
            borrowingTableModel.removeRow(0);
        }
        ArrayList allBorrowEntries = new CRUDBorrowInfoController().getAllBorrowEnrty();
        for (int i = 0; i < allBorrowEntries.size(); i++) {
            BorrowEntry borrowEntry = (BorrowEntry) allBorrowEntries.get(i);
            String username = new CRUDCardController().convertBorrowerNumbertoUsername(borrowEntry.getBorrowerCardNumber());
            String title = new CRUDBookController().convertBookNumbertoTitle(borrowEntry.getBookCopyNumber());

            borrowingTableModel.addRow(new Object[]{username, title, borrowEntry.getBookCopyNumber(), borrowEntry.getBorrowDate(), borrowEntry.getExpectedReturnDate(), convertBorrowStatus(borrowEntry.getStatus())});
        }
    }

    /**
     *
     * @param title
     * @throws SQLException
     */
    public void setValueToBookTableModelbyTitle(String title) throws SQLException {
        jButtonViewBookCopy.setEnabled(false);
        jButtonUpdateBookInfo.setEnabled(false);
        jButtonDeleteBook.setEnabled(false);
        jButtonAddNewCopy.setEnabled(false);
        while (bookTableModel.getRowCount() > 0) {
            bookTableModel.removeRow(0);
        }
        ArrayList allBooks = new CRUDBookController().getBookbyTitle(title);
        for (int i = 0; i < allBooks.size(); i++) {
            Book book = (Book) allBooks.get(i);
            bookTableModel.addRow(new Object[]{book.getBookNumber(), book.getTitle(), book.getAuthor(), book.getClassification(), book.getPublisher(), book.getiSBN()});
        }
    }

    /**
     *
     * @param uname
     * @throws SQLException
     */
    public void setValueToCardTableModelbyUsername(String uname) throws SQLException {
        jButtonUpdateCardInfo.setEnabled(false);

        while (cardTableModel.getRowCount() > 0) {
            cardTableModel.removeRow(0);
        }
        ArrayList allCards = new CRUDCardController().getCardbyUsername(uname);
        for (int i = 0; i < allCards.size(); i++) {
            BorrowerCard borrowerCard = (BorrowerCard) allCards.get(i);
            cardTableModel.addRow(new Object[]{borrowerCard.getBorrowerCardNumber(), borrowerCard.getUsername(), borrowerCard.getActivatedCode(), convertStatus(borrowerCard.getStatus()), borrowerCard.getExpiredDate()});
        }
    }

    /**
     *
     * @param username
     * @throws SQLException
     */
    public void setValueToBorrowTableModelbyUsername(String username) throws SQLException {
        jButtonChangeStatusToReturned.setEnabled(false);
        jButtonChangeStatustoBorrowed.setEnabled(false);
        jButtonDeleteBorrowInfo.setEnabled(false);
        jButtonUpdateBorrowInfo.setEnabled(false);
        while (borrowingTableModel.getRowCount() > 0) {
            borrowingTableModel.removeRow(0);
        }
        ArrayList allBorrowEntries = new CRUDBorrowInfoController().getBorrowEntrybyUsername(username);
        for (int i = 0; i < allBorrowEntries.size(); i++) {
            BorrowEntry borrowEntry = (BorrowEntry) allBorrowEntries.get(i);
            String username_ = new CRUDCardController().convertBorrowerNumbertoUsername(borrowEntry.getBorrowerCardNumber());
            String title = new CRUDBookController().convertBookNumbertoTitle(borrowEntry.getBookCopyNumber());
            borrowingTableModel.addRow(new Object[]{username_, title, borrowEntry.getBookCopyNumber(), borrowEntry.getBorrowDate(), borrowEntry.getExpectedReturnDate(), convertBorrowStatus(borrowEntry.getStatus())});

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddNewBook;
    private javax.swing.JButton jButtonAddNewCopy;
    private javax.swing.JButton jButtonChangeStatusToReturned;
    private javax.swing.JButton jButtonChangeStatustoBorrowed;
    private javax.swing.JButton jButtonDeactiveCard;
    private javax.swing.JButton jButtonDeleteBook;
    private javax.swing.JButton jButtonDeleteBorrowInfo;
    private javax.swing.JButton jButtonIssueCard;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonSearchCardbyUsername;
    private javax.swing.JButton jButtonSearchUsername;
    private javax.swing.JButton jButtonSearchbyTitle;
    private javax.swing.JButton jButtonUpdateBookInfo;
    private javax.swing.JButton jButtonUpdateBorrowInfo;
    private javax.swing.JButton jButtonUpdateCardInfo;
    private javax.swing.JButton jButtonViewBookCopy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanelBook;
    private javax.swing.JPanel jPanelBorrowing;
    private javax.swing.JPanel jPanelCard;
    private javax.swing.JScrollPane jScrollPaneBookList;
    private javax.swing.JScrollPane jScrollPaneBorrowingInfo;
    private javax.swing.JScrollPane jScrollPaneCardList;
    private javax.swing.JTabbedPane jTabbedPaneLibrarianUI;
    private javax.swing.JTable jTableBookList;
    private javax.swing.JTable jTableBorrowingList;
    private javax.swing.JTable jTableCardList;
    private javax.swing.JTextField jTextFieldBorrowingUserName;
    private javax.swing.JTextField jTextFieldCard;
    private javax.swing.JTextField jTextFieldTitle;
    // End of variables declaration//GEN-END:variables
}
